name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

permissions:
  contents: write

jobs:
  # 创建 GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate changelog
        id: changelog
        run: |
          # 生成自上次标签以来的更改日志
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s" --no-merges)
          else
            CHANGES=$(git log --pretty=format:"- %s" --no-merges ${PREVIOUS_TAG}..HEAD)
          fi
          
          # 将更改日志保存到文件
          echo "## 更改日志" > CHANGELOG_CURRENT.md
          echo "" >> CHANGELOG_CURRENT.md
          echo "$CHANGES" >> CHANGELOG_CURRENT.md
          
          # 设置输出
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_CURRENT.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## xjp-oidc ${{ github.ref }}

            ### 安装

            ```toml
            [dependencies]
            xjp-oidc = "${{ github.ref_name }}"
            xjp-oidc-axum = "${{ github.ref_name }}"
            ```

            ${{ steps.changelog.outputs.changelog }}

            ### 完整更改日志
            查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/${{ github.ref }}/CHANGELOG.md)

          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}

  # 构建并上传二进制文件
  build-binaries:
    name: Build Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            suffix: ''
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: '.exe'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install dependencies (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build DCR tool
        run: |
          cargo build --release --target ${{ matrix.target }} -p dcr-registration
          
      - name: Package binaries
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/dcr${{ matrix.suffix }} dist/
          cd dist
          tar czf dcr-${{ matrix.target }}.tar.gz dcr${{ matrix.suffix }}
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./dist/dcr-${{ matrix.target }}.tar.gz
          asset_name: dcr-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  # 发布到 crates.io
  publish-crates:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Login to crates.io
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      
      - name: Publish xjp-oidc
        run: |
          cd xjp-oidc
          cargo publish --no-verify
          
      - name: Wait for crates.io to update
        run: sleep 30
        
      - name: Publish xjp-oidc-axum
        run: |
          cd xjp-oidc-axum
          cargo publish --no-verify

  # 构建并推送 Docker 镜像
  docker:
    name: Build Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        if: ${{ secrets.DOCKER_USERNAME != '' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          
      - name: Build and push auth-bff
        uses: docker/build-push-action@v4
        with:
          context: ./auth-bff
          push: ${{ secrets.DOCKER_USERNAME != '' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/xjp-auth-bff:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/xjp-auth-bff:latest
          platforms: linux/amd64,linux/arm64
          
      - name: Build and push resource-server example
        uses: docker/build-push-action@v4
        with:
          context: ./examples/resource-server
          push: ${{ secrets.DOCKER_USERNAME != '' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/xjp-resource-server:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/xjp-resource-server:latest
          platforms: linux/amd64,linux/arm64

  # 更新文档
  docs:
    name: Update Documentation
    needs: publish-crates
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      
      - name: Build docs
        run: |
          cargo doc --all-features --no-deps
          echo '<meta http-equiv="refresh" content="0; url=xjp_oidc/index.html">' > target/doc/index.html
          
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/tags/v*'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc